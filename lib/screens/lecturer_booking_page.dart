import 'package:aphub/models/lecturer_timeslot_model.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/lecturer_booking_model.dart';
import '../models/lecturer_user_model.dart';
import '../utils/app_colors.dart';

class LecturerBookingPage extends StatefulWidget {
  final String tpNumber;
  const LecturerBookingPage({super.key, required this.tpNumber});

  @override
  State<LecturerBookingPage> createState() => _LecturerBookingPageState();
}

class _LecturerBookingPageState extends State<LecturerBookingPage> {
  final CollectionReference _timeslotsRef =
      FirebaseFirestore.instance.collection("timeslots");
  final String _searchQuery = "";
  final String _selectedVenueType = "All";
  String? _selectedDate;

  Future<String?> _showPurposeDialog(List<String> modules) async {
    String? selectedPurpose;
    return showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("Select Purpose"),
        content: StatefulBuilder(
          builder: (context, setState) => DropdownButton<String>(
            value: selectedPurpose,
            isExpanded: true,
            hint: const Text("Choose a purpose"),
            items: [
              ...modules.map((module) => DropdownMenuItem(
                    value: module,
                    child: Text(module),
                  )),
              const DropdownMenuItem(
                value: "Event",
                child: Text("Event"),
              ),
            ],
            onChanged: (value) => setState(() => selectedPurpose = value),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, null),
            child: const Text("Cancel"),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, selectedPurpose),
            child: const Text("Continue"),
          ),
        ],
      ),
    );
  }

  Future<String> _showEventDetailDialog() async {
    final eventController = TextEditingController();
    return await showDialog<String>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text("Enter Event Details"),
            content: TextField(
              controller: eventController,
              decoration: const InputDecoration(hintText: "Event details"),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, ""),
                child: const Text("Cancel"),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, eventController.text),
                child: const Text("Confirm"),
              ),
            ],
          ),
        ) ??
        "";
  }

  Future<void> _bookTimeslot(Timeslot slot) async {
    try {
      final userDoc = await FirebaseFirestore.instance
          .collection("users")
          .doc(widget.tpNumber)
          .get();

      if (!userDoc.exists) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("User not found!")),
        );
        return;
      }

      final user = User.fromFirestore(userDoc);
      final selectedPurpose = await _showPurposeDialog(user.modules);
      if (selectedPurpose == null) return;

      final detail = selectedPurpose == "Event"
          ? await _showEventDetailDialog()
          : selectedPurpose;
      if (detail.isEmpty) return;

      // Create and save booking
      final booking = Booking(
        id: '', // Auto-generated by Firestore
        userId: widget.tpNumber,
        name: user.name,
        venueName: slot.venueName,
        venueType: slot.venueType,
        date: slot.date,
        startTime: slot.startTime,
        endTime: slot.endTime,
        status: "scheduled",
        bookedTime: DateTime.now(),
        detail: detail,
      );

      await FirebaseFirestore.instance
          .collection("TPbooking")
          .add(booking.toJson());

      // Update timeslot status
      await _timeslotsRef.doc(slot.id).update({"status": "scheduled"});

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Booking Successful!")),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error: $e")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.black,
      appBar: AppBar(
        title: const Text('Book a Venue',
            style: TextStyle(color: AppColors.white)),
        backgroundColor: AppColors.darkdarkgrey,
        iconTheme: const IconThemeData(color: AppColors.white),
      ),
      body: Column(
        children: [
          // Search and filter UI (unchanged from your original code)
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: _timeslotsRef
                  .where("status", isEqualTo: "available")
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                  return const Center(
                      child: Text("No Available Venues",
                          style: TextStyle(color: Colors.white)));
                }

                final timeslots = snapshot.data!.docs
                    .map((doc) => Timeslot.fromFirestore(doc))
                    .where((slot) => _filterTimeslot(slot))
                    .toList();

                return ListView.builder(
                  itemCount: timeslots.length,
                  itemBuilder: (context, index) {
                    final slot = timeslots[index];
                    return Card(
                      color: Colors.grey[850],
                      margin: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 10),
                      child: ListTile(
                        title: Text(slot.venueName,
                            style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold)),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Date: ${slot.date}",
                                style: const TextStyle(color: Colors.white70)),
                            Text("Time: ${slot.startTime} - ${slot.endTime}",
                                style: const TextStyle(color: Colors.white70)),
                            Text("Capacity: ${slot.capacity}",
                                style: const TextStyle(color: Colors.white70)),
                            Text("Equipment: ${slot.equipment.join(', ')}",
                                style: const TextStyle(color: Colors.white70)),
                          ],
                        ),
                        trailing: ElevatedButton(
                          onPressed: () => _bookTimeslot(slot),
                          child: const Text("Book"),
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  bool _filterTimeslot(Timeslot slot) {
    final matchesSearch = _searchQuery.isEmpty ||
        slot.venueName.toLowerCase().contains(_searchQuery);
    final matchesFilter =
        _selectedVenueType == "All" || slot.venueType == _selectedVenueType;
    final matchesDate = _selectedDate == null || slot.date == _selectedDate;
    return matchesSearch && matchesFilter && matchesDate;
  }
}
